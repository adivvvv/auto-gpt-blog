#!/usr/bin/env php
<?php declare(strict_types=1);
// bin/template-install
// Fetch and install a unique template bundle from the feed service.

error_reporting(E_ALL);
ini_set('display_errors', 'stderr');

$opts = getopt('', ['seed::', 'flags::']);
$lang = 'en';
$seed = isset($opts['seed'])  ? (string)$opts['seed']  : null;
$flags = isset($opts['flags']) ? array_values(array_filter(array_map('trim', explode(',', (string)$opts['flags'])))) : [];

// Read language from app config (settings.php) instead of CLI
require __DIR__ . '/../public/bootstrap.php';
$cfg = \App\Util::loadConfig();
$lang = (string)($cfg['lang'] ?? 'en');

$env = parse_ini_file(__DIR__ . '/../.env', false, INI_SCANNER_TYPED) ?: [];
$FEED = rtrim((string)($env['FEED_BASE_URL'] ?? ''), '/');
$KEY  = (string)($env['FEED_API_KEY'] ?? '');

if ($FEED === '' || $KEY === '') {
    fwrite(STDERR, "FEED_BASE_URL or FEED_API_KEY missing in .env\n");
    exit(2);
}

$payload = ['lang' => $lang];
// If seed is not provided, actively request randomization
if ($seed !== null && $seed !== '') {
    $payload['seed'] = $seed;
} else {
    $payload['randomize'] = true;
}
// Only send flags when user passes them (broaden the candidate pool otherwise)
if (!empty($flags)) {
    $payload['styleFlags'] = $flags;
}

$url = $FEED . '/template_bundle?_=' . rawurlencode((string)microtime(true));

$ch = curl_init($url);
curl_setopt_array($ch, [
    CURLOPT_POST            => true,
    CURLOPT_RETURNTRANSFER  => true,
    CURLOPT_HTTPHEADER      => [
        'Authorization: Bearer ' . $KEY,
        'Content-Type: application/json',
        'Cache-Control: no-cache',
    ],
    CURLOPT_POSTFIELDS      => json_encode($payload, JSON_UNESCAPED_UNICODE),
    CURLOPT_TIMEOUT         => 120,
    CURLOPT_CONNECTTIMEOUT  => 10,
]);

$raw = curl_exec($ch);
if ($raw === false) {
    fwrite(STDERR, "HTTP error: " . curl_error($ch) . "\n");
    exit(3);
}
$code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

$data = json_decode((string)$raw, true);
if ($code !== 200 || !is_array($data) || empty($data['ok']) || empty($data['bundle']['files'])) {
    fwrite(STDERR, "Feed error ($code): " . substr($raw ?? '', 0, 400) . "\n");
    exit(4);
}

$bundle = $data['bundle'];
$name   = (string)($bundle['name'] ?? 'Unnamed Theme');
$seedR  = (string)($bundle['seed'] ?? ($data['plan']['seed'] ?? 'n/a'));

$root = realpath(__DIR__ . '/..') ?: dirname(__DIR__);
$written = 0;
foreach ($bundle['files'] as $f) {
    $path = $root . $f['path'];
    $dir  = dirname($path);
    if (!is_dir($dir) && !mkdir($dir, 0775, true) && !is_dir($dir)) {
        fwrite(STDERR, "Cannot create dir: $dir\n");
        exit(5);
    }
    if (file_put_contents($path, (string)$f['content']) === false) {
        fwrite(STDERR, "Cannot write file: $path\n");
        exit(6);
    }
    $written++;
}

echo "Installed template '{$name}' (seed={$seedR}) â€” {$written} files written\n";